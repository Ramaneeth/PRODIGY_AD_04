def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 9)

def check_winner(board):
    # Check rows, columns, and diagonals for a win
    for row in board:
        if row.count(row[0]) == 3 and row[0] != " ":
            return True

    for col in range(3):
        if all(board[row][col] == board[0][col] and board[0][col] != " " for row in range(3)):
            return True

    if all(board[i][i] == board[0][0] and board[0][0] != " " for i in range(3)):
        return True

    if all(board[i][2 - i] == board[0][2] and board[0][2] != " " for i in range(3)):
        return True

    return False

def is_board_full(board):
    return all(cell != " " for row in board for cell in row)

def reset_board():
    return [[" " for _ in range(3)] for _ in range(3)]

def main():
    board = reset_board()
    current_player = "X"

    while True:
        print_board(board)
        print(f"Player {current_player}'s turn. Enter row and column (0, 1, or 2) separated by space (or type 'reset' to start a new game):")
        
        move = input()
        
        if move.lower() == 'reset':
            board = reset_board()
            current_player = "X"
            continue
        
        try:
            row, col = map(int, move.split())
            if board[row][col] != " ":
                print("Cell already taken! Try again.")
                continue
            board[row][col] = current_player
        except (ValueError, IndexError):
            print("Invalid input! Please enter row and column as two numbers between 0 and 2.")
            continue

        if check_winner(board):
            print_board(board)
            print(f"Player {current_player} wins!")
            break
        
        if is_board_full(board):
            print_board(board)
            print("It's a tie!")
            break

        current_player = "O" if current_player == "X" else "X"

if __name__ == "__main__":
    main()